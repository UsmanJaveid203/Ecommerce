{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Head from 'next/head';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { parseCookies } from 'nookies';\nimport jwt from 'jsonwebtoken';\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: '96%'\n  },\n  paper: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(6),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  form: {\n    width: '100%',\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\nexport default function SignUp({\n  token,\n  data,\n  user_role,\n  user_id\n}) {\n  const router = useRouter();\n  const classes = useStyles();\n  const {\n    0: values,\n    1: setValue\n  } = useState({\n    firstName: data.u_fname,\n    lastName: data.u_sname,\n    password: \"\",\n    email: data.u_email,\n    user_select: data.u_role,\n    picture: \"\"\n  });\n\n  const ChangeValue = e => {\n    if (e.target.type === 'file') {\n      let key = e.target.name;\n      let val = document.getElementById(\"profile_img\").files[0];\n      setValue(preval => {\n        return _objectSpread(_objectSpread({}, preval), {}, {\n          [key]: val\n        });\n      });\n    } else {\n      let key = e.target.name;\n      let val = e.target.value;\n      setValue(preval => {\n        return _objectSpread(_objectSpread({}, preval), {}, {\n          [key]: val\n        });\n      });\n    }\n  };\n\n  const UpdateRecord = e => {\n    e.preventDefault();\n    var form = new FormData();\n    form.append('u_fname', values.firstName);\n    form.append('u_sname', values.lastName);\n    form.append('u_email', values.email);\n    form.append('u_role', values.user_select);\n    form.append('u_password', values.password);\n    form.append('u_image', values.picture);\n    fetch(`http://localhost:3000/api/user/updateData/${user_id}`, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: form\n    }).then(res => res.json()).then(data => {\n      router.push('/Community');\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Update Data\")), __jsx(Container, {\n    \"data-aos\": \"fade-up\",\n    \"data-aos-anchor-placement\": \"center-bottom\",\n    component: \"main\",\n    maxWidth: \"xs\"\n  }, __jsx(CssBaseline, null), __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h3\"\n  }, \"Update Data\"), __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(TextField, {\n    autoComplete: \"fname\",\n    name: \"firstName\",\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"firstName\",\n    label: \"First Name\",\n    onChange: ChangeValue,\n    value: values.firstName,\n    autoFocus: true\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"lastName\",\n    label: \"Last Name\",\n    name: \"lastName\",\n    onChange: ChangeValue,\n    autoComplete: \"lname\",\n    value: values.lastName\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    name: \"email\",\n    onChange: ChangeValue,\n    autoComplete: \"email\",\n    value: values.email\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    name: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    id: \"password\",\n    onChange: ChangeValue,\n    autoComplete: \"current-password\",\n    value: values.password\n  })), user_role === \"root\" ? __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(\"input\", {\n    name: \"picture\",\n    className: `form-control`,\n    value: values.picture.fileName,\n    type: \"file\",\n    id: \"profile_img\",\n    onChange: ChangeValue\n  })), __jsx(Grid, {\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"demo-simple-select-outlined-label\"\n  }, \"Select Role\"), __jsx(Select, {\n    labelId: \"demo-simple-select-outlined-label\",\n    id: \"demo-simple-select-outlined\",\n    label: \"Select Role\",\n    name: \"user_select\",\n    onChange: ChangeValue,\n    value: values.user_select\n  }, __jsx(MenuItem, {\n    value: \"User\"\n  }, \"User\"), __jsx(MenuItem, {\n    value: \"Admin\"\n  }, \"Admin\"))))) : null), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    onClick: UpdateRecord\n  }, \"Update Data\")))));\n}\nexport async function getServerSideProps(ctx) {\n  const {\n    token\n  } = parseCookies(ctx);\n  let user = jwt.decode(token);\n  let user_role = user ? user.u_role : \"\";\n  let user_id = ctx.params.id;\n\n  if (!token) {\n    const {\n      res\n    } = ctx;\n    res.writeHead(302, {\n      Location: \"/\"\n    });\n    res.end();\n    return {\n      props: {}\n    };\n  } else {\n    const res = await fetch(`http://localhost:3000/api/user/getData/${user_id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await res.json();\n    return {\n      props: {\n        token,\n        data,\n        user_role,\n        user_id\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}