{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { parseCookies } from 'nookies';\nimport { useEffect } from 'react';\nimport Checkout from '../components/CheckOut';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GetFromCookie, RemoveFromCookie, UpdateCounting } from '../../redux/Action/CartAction';\nimport jwt from 'jsonwebtoken';\nimport CartStyle from '../../public/styles/Cart.module.css';\nimport Head from 'next/head';\nexport default function index({\n  token,\n  user_id\n}) {\n  const dispatch = new useDispatch();\n  const Information = useSelector(state => state.cart.items);\n  const Order_no = useSelector(state => state.cart.orderItems);\n  const price = useSelector(state => state.cart.totalPrice);\n\n  const RemoveItemHandler = index => {\n    dispatch(RemoveFromCookie(index));\n  };\n\n  const changeHandler = UserInfo => {\n    let val = document.getElementById(`field${UserInfo.item._id}`).value;\n    let userInfor = {\n      val: parseInt(val),\n      id: UserInfo.item._id,\n      p_price: UserInfo.item.p_price\n    };\n    dispatch(UpdateCounting(userInfor));\n  };\n\n  useEffect(() => {\n    dispatch(GetFromCookie());\n  }, []);\n\n  if (token) {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Cart page\")), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-8 col-12\"\n    }, __jsx(\"div\", {\n      className: CartStyle.tblDiv\n    }, __jsx(\"h1\", {\n      className: CartStyle.heading\n    }, \"Cart Product\"), __jsx(\"table\", {\n      className: `table ${CartStyle.pro_table}`\n    }, __jsx(\"thead\", null, __jsx(\"tr\", {\n      className: CartStyle.tbl_heading\n    }, __jsx(\"th\", null, \"#NO\"), __jsx(\"th\", null, \"Images\"), __jsx(\"th\", null, \"Product Name\"), __jsx(\"th\", null, \"price\"), __jsx(\"th\", null, \"buy items\"), __jsx(\"th\", null, \"remove item\"))), Order_no > 0 ? __jsx(\"tbody\", null, Information === null || Information === void 0 ? void 0 : Information.map((value, index) => {\n      return __jsx(\"tr\", {\n        key: index\n      }, __jsx(\"td\", null, index + 1), __jsx(\"td\", {\n        className: \"text-center\"\n      }, __jsx(\"img\", {\n        src: `/images/${value.item.p_image}`,\n        className: `img-thumbnail ${CartStyle.image}`,\n        alt: \"category_photo\"\n      })), __jsx(\"td\", null, value.item.p_name), __jsx(\"td\", null, value.item.p_price), __jsx(\"td\", null, __jsx(\"input\", {\n        type: \"text\",\n        id: `field${value.item._id}`,\n        defaultValue: value.qty,\n        className: CartStyle.inputfield,\n        onChange: changeHandler.bind(this, value)\n      })), __jsx(\"td\", null, __jsx(\"a\", {\n        className: \"text-center\",\n        type: \"button\",\n        onClick: RemoveItemHandler.bind(this, index)\n      }, __jsx(\"i\", {\n        className: `fas fa-minus-circle ${CartStyle.icons}`\n      }))));\n    })) : __jsx(\"td\", {\n      colSpan: \"7\",\n      className: CartStyle.No_record_div\n    }, __jsx(\"h1\", null, \"Not found any product\"))))), __jsx(\"div\", {\n      className: \"col-md-4 col-12\"\n    }, __jsx(\"div\", {\n      className: `card ${CartStyle.crd}`\n    }, __jsx(\"div\", {\n      className: \"card-body\"\n    }, __jsx(\"h2\", {\n      className: `card-title ${CartStyle.crd_heading}`\n    }, \"Total Bill\"), __jsx(\"p\", {\n      className: `card-text ${CartStyle.card_para}`\n    }, __jsx(\"strong\", null, \"No. of Items : \"), Order_no), __jsx(\"p\", {\n      className: `card-text ${CartStyle.card_para}`\n    }, __jsx(\"strong\", null, \"Total Price  : \"), \"$ \", price), __jsx(Checkout, {\n      user_id: user_id,\n      price: price\n    }))))));\n  }\n}\nexport async function getServerSideProps(ctx) {\n  const {\n    token\n  } = parseCookies(ctx);\n  let user = jwt.decode(token);\n  let user_id = user ? user.u_id : \"\";\n\n  if (!token) {\n    const {\n      res\n    } = ctx;\n    res.writeHead(302, {\n      Location: \"/SignIn\"\n    });\n    res.end();\n    return {\n      props: {}\n    };\n  } else {\n    return {\n      props: {\n        token,\n        user_id\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}